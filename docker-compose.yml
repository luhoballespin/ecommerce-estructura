version: '3.8'

services:
  # Base de datos MongoDB
  mongodb:
    image: mongo:6.0
    container_name: ecommerce-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: ecommerce
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - ecommerce-network

  # Redis para caché (opcional)
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ecommerce-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/ecommerce?authSource=admin
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=tu-jwt-secret-super-seguro-para-produccion
      - TOKEN_SECRET_KEY=tu-token-secret-super-seguro-para-produccion
      - FRONTEND_URL=http://localhost:3000
      - EMAIL_PROVIDER=gmail
      - EMAIL_USER=tu-email@gmail.com
      - EMAIL_PASS=tu-app-password
      - EMAIL_FROM_NAME=Mi Tienda Online
      - APP_NAME=Mi Tienda Online
      - ADMIN_EMAIL=admin@mitienda.com
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    depends_on:
      - mongodb
      - redis
    networks:
      - ecommerce-network

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ecommerce-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_CLOUD_NAME_CLOUDINARY=tu-cloud-name
    depends_on:
      - backend
    networks:
      - ecommerce-network

  # Nginx como proxy reverso (opcional para producción)
  nginx:
    image: nginx:alpine
    container_name: ecommerce-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - ecommerce-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  ecommerce-network:
    driver: bridge
