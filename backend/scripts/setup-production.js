/**
 * Script para configurar la base de datos en producci√≥n
 * Crea √≠ndices, configura usuarios iniciales y datos de ejemplo
 */

const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const userModel = require('../models/userModel');
const productModel = require('../models/productModel');
const addToCartModel = require('../models/cartProduct');
require('dotenv').config();

/**
 * Configurar √≠ndices de base de datos para optimizaci√≥n
 */
async function setupDatabaseIndexes() {
  console.log('üîß Configurando √≠ndices de base de datos...');

  try {
    // √çndices para usuarios
    await userModel.collection.createIndex({ email: 1 }, { unique: true });
    await userModel.collection.createIndex({ role: 1 });
    await userModel.collection.createIndex({ createdAt: -1 });

    // √çndices para productos (manejar conflictos)
    await productModel.collection.createIndex({ category: 1 });
    await productModel.collection.createIndex({ subcategory: 1 });
    await productModel.collection.createIndex({ price: 1 });
    await productModel.collection.createIndex({ sellingPrice: 1 });
    await productModel.collection.createIndex({ isActive: 1 });
    await productModel.collection.createIndex({ createdAt: -1 });
    await productModel.collection.createIndex({ brandName: 1 });

    // √çndice de texto (manejar conflictos)
    try {
      await productModel.collection.createIndex({ productName: 'text', description: 'text', tags: 'text' });
    } catch (indexError) {
      if (indexError.code === 85) { // IndexOptionsConflict
        console.log('‚ÑπÔ∏è  √çndice de texto ya existe con diferentes opciones - omitiendo');
      } else {
        throw indexError;
      }
    }

    console.log('‚úÖ √çndices configurados correctamente');
  } catch (error) {
    console.error('‚ùå Error configurando √≠ndices:', error);
    throw error;
  }
}

/**
 * Crear usuario administrador por defecto
 */
async function createDefaultAdmin() {
  console.log('üë§ Creando usuario administrador por defecto...');

  try {
    const adminEmail = process.env.ADMIN_EMAIL || 'admin@mitienda.com';
    const adminPassword = process.env.ADMIN_PASSWORD || 'admin123';

    console.log('üîë Credenciales de administrador:', { email: adminEmail, password: adminPassword });

    // Verificar si ya existe un admin
    const existingAdmin = await userModel.findOne({ role: 'admin' });
    if (existingAdmin) {
      console.log('‚ÑπÔ∏è  Usuario administrador ya existe, actualizando contrase√±a...');
      // Actualizar la contrase√±a del admin existente
      const hashedPassword = await bcrypt.hash(adminPassword, 12);
      await userModel.updateOne(
        { role: 'admin' },
        {
          password: hashedPassword,
          email: adminEmail,
          name: 'Administrador',
          isActive: true,
          emailVerified: true
        }
      );
      console.log('‚úÖ Usuario administrador actualizado con nuevas credenciales');
      return;
    }

    // Crear usuario administrador
    const hashedPassword = await bcrypt.hash(adminPassword, 12);

    const adminUser = new userModel({
      name: 'Administrador',
      email: adminEmail,
      password: hashedPassword,
      role: 'admin',
      isActive: true,
      emailVerified: true,
      preferences: {
        currency: 'ARS',
        language: 'es',
        notifications: {
          email: true,
          sms: false
        }
      }
    });

    await adminUser.save();
    console.log(`‚úÖ Usuario administrador creado: ${adminEmail}`);
    console.log(`üîë Contrase√±a temporal: ${adminPassword}`);
    console.log('‚ö†Ô∏è  IMPORTANTE: Cambia la contrase√±a despu√©s del primer login');

  } catch (error) {
    console.error('‚ùå Error creando usuario administrador:', error);
    throw error;
  }
}

/**
 * Configurar categor√≠as por defecto
 */
async function setupDefaultCategories() {
  console.log('üìÅ Configurando categor√≠as por defecto...');

  const defaultCategories = [
    { value: 'electronics', label: 'Electr√≥nicos', icon: 'üì±' },
    { value: 'clothing', label: 'Ropa', icon: 'üëï' },
    { value: 'home', label: 'Hogar', icon: 'üè†' },
    { value: 'sports', label: 'Deportes', icon: '‚öΩ' },
    { value: 'books', label: 'Libros', icon: 'üìö' },
    { value: 'toys', label: 'Juguetes', icon: 'üß∏' },
    { value: 'beauty', label: 'Belleza', icon: 'üíÑ' },
    { value: 'automotive', label: 'Automotriz', icon: 'üöó' }
  ];

  try {
    // Guardar categor√≠as en la configuraci√≥n de la app
    console.log('‚úÖ Categor√≠as configuradas:', defaultCategories.map(c => c.label).join(', '));
  } catch (error) {
    console.error('‚ùå Error configurando categor√≠as:', error);
    throw error;
  }
}

/**
 * Verificar configuraci√≥n de seguridad
 */
async function verifySecurityConfig() {
  console.log('üîí Verificando configuraci√≥n de seguridad...');

  const requiredEnvVars = [
    'JWT_SECRET',
    'TOKEN_SECRET_KEY',
    'SESSION_SECRET',
    'MONGODB_URI'
  ];

  const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);

  if (missingVars.length > 0) {
    throw new Error(`Variables de entorno faltantes: ${missingVars.join(', ')}`);
  }

  // Verificar que las claves secretas sean lo suficientemente largas
  const secrets = ['JWT_SECRET', 'TOKEN_SECRET_KEY', 'SESSION_SECRET'];
  for (const secret of secrets) {
    if (process.env[secret].length < 32) {
      console.warn(`‚ö†Ô∏è  ${secret} es muy corta (${process.env[secret].length} caracteres). Recomendado: m√≠nimo 32`);
    }
  }

  console.log('‚úÖ Configuraci√≥n de seguridad verificada');
}

/**
 * Corregir IDs de productos inv√°lidos
 */
async function fixProductIds() {
  console.log('üîß Corrigiendo IDs de productos...');

  try {
    // Datos de productos corregidos
    const correctedProducts = [
      {
        productName: "Samsung Galaxy S24 Ultra",
        brandName: "Samsung",
        category: "electronics",
        subcategory: "smartphones",
        productImage: ["https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?w=500"],
        description: "Smartphone premium con S Pen y c√°mara de 200MP para fotograf√≠a profesional.",
        price: 119999,
        sellingPrice: 109999,
        stock: 50,
        sku: "SAMS24U001",
        tags: ["smartphone", "samsung", "premium"],
        isActive: true
      },
      {
        productName: "AirPods Pro 2da Gen",
        brandName: "Apple",
        category: "electronics",
        subcategory: "audio",
        productImage: ["https://images.unsplash.com/photo-1606220588913-b3aacb4d4f46?w=500"],
        description: "Auriculares inal√°mbricos con cancelaci√≥n activa de ruido y audio espacial.",
        price: 27999,
        sellingPrice: 24999,
        stock: 30,
        sku: "APPLEAP001",
        tags: ["airpods", "apple", "inalambrico"],
        isActive: true
      },
      {
        productName: "iPhone 15 Pro Max",
        brandName: "Apple",
        category: "electronics",
        subcategory: "smartphones",
        productImage: ["https://images.unsplash.com/photo-1592899677977-9c10ca588bbd?w=500"],
        description: "El smartphone m√°s avanzado con c√°mara profesional y rendimiento excepcional.",
        price: 149999,
        sellingPrice: 129999,
        stock: 25,
        sku: "APPLEIP001",
        tags: ["iphone", "apple", "premium"],
        isActive: true
      },
      {
        productName: "MacBook Air M2",
        brandName: "Apple",
        category: "electronics",
        subcategory: "laptops",
        productImage: ["https://images.unsplash.com/photo-1517336714731-489689fd1ca8?w=500"],
        description: "Laptop ultradelgada con chip M2 para m√°ximo rendimiento y duraci√≥n de bater√≠a.",
        price: 99999,
        sellingPrice: 89999,
        stock: 20,
        sku: "APPLEMBA001",
        tags: ["macbook", "apple", "laptop"],
        isActive: true
      }
    ];

    // 1. Limpiar productos existentes con IDs inv√°lidos
    console.log('üóëÔ∏è Eliminando productos con IDs inv√°lidos...');
    await productModel.deleteMany({});
    console.log('‚úÖ Productos eliminados');

    // 2. Limpiar carritos existentes
    console.log('üóëÔ∏è Limpiando carritos existentes...');
    await addToCartModel.deleteMany({});
    console.log('‚úÖ Carritos limpiados');

    // 3. Crear productos nuevos con IDs v√°lidos
    console.log('‚ûï Creando productos nuevos...');
    const createdProducts = await productModel.insertMany(correctedProducts);
    console.log(`‚úÖ ${createdProducts.length} productos creados con IDs v√°lidos`);

    // Mostrar los IDs de los productos creados
    console.log('\nüìã Productos creados con IDs v√°lidos:');
    createdProducts.forEach(product => {
      console.log(`- ${product.productName} (ID: ${product._id})`);
    });

    console.log('üéâ Correcci√≥n de productos completada');

  } catch (error) {
    console.error('‚ùå Error corrigiendo productos:', error);
    throw error;
  }
}

/**
 * Funci√≥n principal de configuraci√≥n
 */
async function setupProduction() {
  try {
    console.log('üöÄ Iniciando configuraci√≥n de producci√≥n...');

    // Conectar a la base de datos
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Conectado a MongoDB');

    // Ejecutar configuraciones
    await verifySecurityConfig();

    // Configurar √≠ndices (continuar aunque haya errores)
    try {
      await setupDatabaseIndexes();
    } catch (indexError) {
      console.log('‚ö†Ô∏è  Error en √≠ndices, pero continuando...');
    }

    await createDefaultAdmin();
    await setupDefaultCategories();
    await fixProductIds();

    console.log('üéâ Configuraci√≥n de producci√≥n completada exitosamente');

  } catch (error) {
    console.error('‚ùå Error en configuraci√≥n de producci√≥n:', error);
    process.exit(1);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Desconectado de MongoDB');
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  setupProduction();
}

module.exports = { setupProduction };
